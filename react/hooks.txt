
State
    - Used to manage data that changes over time witthin a component Unlike props
    - State is mutable and can be changed by the component itself
    - State is typically used for data that needs to be cynamic and change in response to user actions or other events

const [state, setState] = useState(initialState);
    - state:            the current state Value
    - setState:         function to update the state
    - initialState:     the initial state value
    $ <button onClick={() => setCount(prevCount => prevCount + 1)}>Increment</button>

const [state, dispatch] = useReducer(reducer, initialState);
    - state:            The current state value.
    - dispatch:         Function to dispatch actions to update the state.
    - reducer:          A reducer function that takes the current state and an action, and returns the new state.
    - initialState:     The initial state value.

useEffect(() => {
    fetch('https://api.example.com/data')
      .then((response) => response.json())
      .then((data) => setData(data));
  }, []); // Empty dependency array means this effect runs once after the initial render
 
    useState    
        - Event Listeners
        - DOM manipulation
        - subscription
        - fetching data 
        - clean up when a component unmounts

    takeplace 
        - component rerender
        - component mounts
        - state of a value 

useContext() 
    - reaact hook that allows you to share values between multiple levels of components without passing props through each levels
    